#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('spetto:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var knex = require('knex')({
  client: 'mysql',
  connection: {
    host: "localhost",
    user: "root",
    password: "556556",
    database: "Spetto"
  },
  pool: {
    min: 1,
    max: 20,
  }
});
var io = require('socket.io')(server);
let itensPedido = require('../modelo/itensPedido');
let pedido = require('../modelo/pedido');
let praca = require('../modelo/praca');
let usuario = require('../modelo/usuario');
let donoPedido = require('../modelo/donoPedido');
let pedidoController = require('../controlador/pedidoControlador')
app.set('usuario', new usuario.Usuario(io, knex));
app.set('itensPedido', new itensPedido.ItensPedido(knex));
app.set('pedido', new pedido.Pedido(knex));
//app.set('praca', new praca.Praca(knex));
app.set('donoPedido', new donoPedido.DonoPedido(knex));
app.set('knex', knex);
app.set('pedidoController', new pedidoController.PedidoController(knex, pedido));

/**
 * Listen on provided port, on all network interfaces.
 */
console.log('Porta em uso: ', port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
